{"ast":null,"code":"import { rest } from 'msw';\nimport { db } from 'mocks/db';\nimport faker from 'faker';\nexport const notes = [rest.get('/notes', (req, res, ctx) => {\n  return res(ctx.status(200), ctx.json({\n    notes: db.note.getAll()\n  }));\n}), rest.post('/notes', (req, res, ctx) => {\n  if (req.body.title && req.body.content) {\n    console.log('MSW:', req.body);\n    const newNote = {\n      id: faker.datatype.uuid(),\n      title: req.body.title,\n      content: req.body.content\n    };\n    db.note.create(newNote);\n    return res(ctx.status(201), ctx.json({\n      notes: newNote\n    }));\n  }\n\n  return res(ctx.status(400), ctx.json({\n    error: 'Every note needs to contain title and content'\n  }));\n}), rest.delete('/notes', (req, res, ctx) => {\n  if (req.body.id) {\n    const removedNote = db.note.delete({\n      where: {\n        id: {\n          equals: req.body.id\n        }\n      }\n    });\n    return res(ctx.status(200), ctx.json({\n      removedNote\n    }));\n  }\n\n  return res(ctx.status(400), ctx.json({\n    error: 'Please provide ID of removed note'\n  }));\n})];","map":{"version":3,"sources":["/Users/daniel/Documents/GitHub/hr-study-buddy/src/mocks/handlers/notes.js"],"names":["rest","db","faker","notes","get","req","res","ctx","status","json","note","getAll","post","body","title","content","console","log","newNote","id","datatype","uuid","create","error","delete","removedNote","where","equals"],"mappings":"AAAA,SAASA,IAAT,QAAqB,KAArB;AACA,SAASC,EAAT,QAAmB,UAAnB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,OAAO,MAAMC,KAAK,GAAG,CACnBH,IAAI,CAACI,GAAL,CAAS,QAAT,EAAmB,CAACC,GAAD,EAAMC,GAAN,EAAWC,GAAX,KAAmB;AACpC,SAAOD,GAAG,CAACC,GAAG,CAACC,MAAJ,CAAW,GAAX,CAAD,EAAkBD,GAAG,CAACE,IAAJ,CAAS;AAAEN,IAAAA,KAAK,EAAEF,EAAE,CAACS,IAAH,CAAQC,MAAR;AAAT,GAAT,CAAlB,CAAV;AACD,CAFD,CADmB,EAInBX,IAAI,CAACY,IAAL,CAAU,QAAV,EAAoB,CAACP,GAAD,EAAMC,GAAN,EAAWC,GAAX,KAAmB;AACrC,MAAIF,GAAG,CAACQ,IAAJ,CAASC,KAAT,IAAkBT,GAAG,CAACQ,IAAJ,CAASE,OAA/B,EAAwC;AACtCC,IAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ,EAAoBZ,GAAG,CAACQ,IAAxB;AACA,UAAMK,OAAO,GAAG;AACdC,MAAAA,EAAE,EAAEjB,KAAK,CAACkB,QAAN,CAAeC,IAAf,EADU;AAEdP,MAAAA,KAAK,EAAET,GAAG,CAACQ,IAAJ,CAASC,KAFF;AAGdC,MAAAA,OAAO,EAAEV,GAAG,CAACQ,IAAJ,CAASE;AAHJ,KAAhB;AAMAd,IAAAA,EAAE,CAACS,IAAH,CAAQY,MAAR,CAAeJ,OAAf;AAEA,WAAOZ,GAAG,CACRC,GAAG,CAACC,MAAJ,CAAW,GAAX,CADQ,EAERD,GAAG,CAACE,IAAJ,CAAS;AACPN,MAAAA,KAAK,EAAEe;AADA,KAAT,CAFQ,CAAV;AAMD;;AAED,SAAOZ,GAAG,CACRC,GAAG,CAACC,MAAJ,CAAW,GAAX,CADQ,EAERD,GAAG,CAACE,IAAJ,CAAS;AACPc,IAAAA,KAAK,EAAE;AADA,GAAT,CAFQ,CAAV;AAMD,CAzBD,CAJmB,EA8BnBvB,IAAI,CAACwB,MAAL,CAAY,QAAZ,EAAsB,CAACnB,GAAD,EAAMC,GAAN,EAAWC,GAAX,KAAmB;AACvC,MAAIF,GAAG,CAACQ,IAAJ,CAASM,EAAb,EAAiB;AACf,UAAMM,WAAW,GAAGxB,EAAE,CAACS,IAAH,CAAQc,MAAR,CAAe;AACjCE,MAAAA,KAAK,EAAE;AACLP,QAAAA,EAAE,EAAE;AACFQ,UAAAA,MAAM,EAAEtB,GAAG,CAACQ,IAAJ,CAASM;AADf;AADC;AAD0B,KAAf,CAApB;AAQA,WAAOb,GAAG,CACRC,GAAG,CAACC,MAAJ,CAAW,GAAX,CADQ,EAERD,GAAG,CAACE,IAAJ,CAAS;AACPgB,MAAAA;AADO,KAAT,CAFQ,CAAV;AAMD;;AAED,SAAOnB,GAAG,CACRC,GAAG,CAACC,MAAJ,CAAW,GAAX,CADQ,EAERD,GAAG,CAACE,IAAJ,CAAS;AACPc,IAAAA,KAAK,EAAE;AADA,GAAT,CAFQ,CAAV;AAMD,CAxBD,CA9BmB,CAAd","sourcesContent":["import { rest } from 'msw';\nimport { db } from 'mocks/db';\nimport faker from 'faker';\n\nexport const notes = [\n  rest.get('/notes', (req, res, ctx) => {\n    return res(ctx.status(200), ctx.json({ notes: db.note.getAll() }));\n  }),\n  rest.post('/notes', (req, res, ctx) => {\n    if (req.body.title && req.body.content) {\n      console.log('MSW:', req.body);\n      const newNote = {\n        id: faker.datatype.uuid(),\n        title: req.body.title,\n        content: req.body.content,\n      };\n\n      db.note.create(newNote);\n\n      return res(\n        ctx.status(201),\n        ctx.json({\n          notes: newNote,\n        })\n      );\n    }\n\n    return res(\n      ctx.status(400),\n      ctx.json({\n        error: 'Every note needs to contain title and content',\n      })\n    );\n  }),\n  rest.delete('/notes', (req, res, ctx) => {\n    if (req.body.id) {\n      const removedNote = db.note.delete({\n        where: {\n          id: {\n            equals: req.body.id,\n          },\n        },\n      });\n\n      return res(\n        ctx.status(200),\n        ctx.json({\n          removedNote,\n        })\n      );\n    }\n\n    return res(\n      ctx.status(400),\n      ctx.json({\n        error: 'Please provide ID of removed note',\n      })\n    );\n  }),\n];\n"]},"metadata":{},"sourceType":"module"}