{"ast":null,"code":"import { factory, primaryKey } from '@mswjs/data';\nimport faker from 'faker';\nfaker.seed(123);\nconst groups = ['A', 'B', 'C'];\nconst eventTypes = ['workshop', 'exam', 'lecture'];\n\nconst getRandomValue = (array, index) => array[index];\n\nconst getRandomAverage = () => faker.datatype.number({\n  min: 2,\n  max: 5,\n  precision: 0.1\n});\n\nexport const db = factory({\n  student: {\n    id: primaryKey(faker.datatype.uuid),\n    name: () => faker.fake('{{name.firstName}} {{name.lastName}}'),\n    attendance: () => `${faker.datatype.number({\n      min: 0,\n      max: 100\n    })}`,\n    average: getRandomAverage,\n    group: () => getRandomValue(groups, faker.datatype.number({\n      min: 0,\n      max: 2\n    })),\n    course: () => faker.fake('{{company.bsAdjective}} {{company.bsNoun}}'),\n    grades: () => [{\n      subject: 'Business Philosophy',\n      average: getRandomAverage()\n    }, {\n      subject: 'Marketing',\n      average: getRandomAverage()\n    }, {\n      subject: 'Modern Economy',\n      average: getRandomAverage()\n    }]\n  },\n  group: {\n    id: primaryKey(String)\n  },\n  event: {\n    id: primaryKey(faker.datatype.uuid),\n    type: () => getRandomValue(eventTypes, faker.datatype.number({\n      min: 0,\n      max: 2\n    })),\n    group: () => getRandomValue(groups, faker.datatype.number({\n      min: 0,\n      max: 2\n    })),\n    subject: () => faker.fake('{{company.bsAdjective}} {{company.bsNoun}}'),\n    date: faker.date.soon\n  },\n  teacher: {\n    id: primaryKey(() => '1'),\n    name: () => 'Jacek Sobczak',\n    login: () => 'teacher@studybuddy.com',\n    password: () => 'Test123'\n  },\n  note: {\n    id: primaryKey(faker.datatype.uuid),\n    title: () => 'Lorem ipsum dolor sit amet',\n    content: () => 'Lorem ipsum dolor sit amet'\n  }\n});","map":{"version":3,"sources":["/Users/daniel/Documents/GitHub/hr-study-buddy/src/mocks/db.js"],"names":["factory","primaryKey","faker","seed","groups","eventTypes","getRandomValue","array","index","getRandomAverage","datatype","number","min","max","precision","db","student","id","uuid","name","fake","attendance","average","group","course","grades","subject","String","event","type","date","soon","teacher","login","password","note","title","content"],"mappings":"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","sourcesContent":["import { factory, primaryKey } from '@mswjs/data';\nimport faker from 'faker';\n\nfaker.seed(123);\n\nconst groups = ['A', 'B', 'C'];\nconst eventTypes = ['workshop', 'exam', 'lecture'];\nconst getRandomValue = (array, index) => array[index];\nconst getRandomAverage = () => faker.datatype.number({ min: 2, max: 5, precision: 0.1 });\n\nexport const db = factory({\n  student: {\n    id: primaryKey(faker.datatype.uuid),\n    name: () => faker.fake('{{name.firstName}} {{name.lastName}}'),\n    attendance: () => `${faker.datatype.number({ min: 0, max: 100 })}`,\n    average: getRandomAverage,\n    group: () => getRandomValue(groups, faker.datatype.number({ min: 0, max: 2 })),\n    course: () => faker.fake('{{company.bsAdjective}} {{company.bsNoun}}'),\n    grades: () => [\n      {\n        subject: 'Business Philosophy',\n        average: getRandomAverage(),\n      },\n      {\n        subject: 'Marketing',\n        average: getRandomAverage(),\n      },\n      {\n        subject: 'Modern Economy',\n        average: getRandomAverage(),\n      },\n    ],\n  },\n  group: {\n    id: primaryKey(String),\n  },\n  event: {\n    id: primaryKey(faker.datatype.uuid),\n    type: () => getRandomValue(eventTypes, faker.datatype.number({ min: 0, max: 2 })),\n    group: () => getRandomValue(groups, faker.datatype.number({ min: 0, max: 2 })),\n    subject: () => faker.fake('{{company.bsAdjective}} {{company.bsNoun}}'),\n    date: faker.date.soon,\n  },\n  teacher: {\n    id: primaryKey(() => '1'),\n    name: () => 'Jacek Sobczak',\n    login: () => 'teacher@studybuddy.com',\n    password: () => 'Test123',\n  },\n  note: {\n    id: primaryKey(faker.datatype.uuid),\n    title: () => 'Lorem ipsum dolor sit amet',\n    content: () => 'Lorem ipsum dolor sit amet',\n  },\n});\n"]},"metadata":{},"sourceType":"module"}