{"ast":null,"code":"import { rest } from 'msw';\nimport { db } from 'mocks/db';\nimport { authenticateRequest } from 'mocks/helpers';\n\nconst sanitizeUser = user => {\n  const {\n    password,\n    ...rest\n  } = user;\n  return rest;\n};\n\nexport const auth = [rest.post('/login', (req, res, ctx) => {\n  const user = db.teacher.findFirst({\n    where: {\n      login: {\n        equals: req.body.login\n      }\n    }\n  });\n\n  if (user && user.password === req.body.password) {\n    const token = btoa(user.login);\n    localStorage.setItem('__be_token__', token);\n    return res(ctx.status(200), ctx.json({ ...sanitizeUser(user),\n      token\n    }));\n  }\n\n  return res(ctx.status(403), ctx.json({\n    error: 'Invalid user data'\n  }));\n}), rest.get('/me', (req, res, ctx) => {\n  if (authenticateRequest(req)) {\n    const user = db.teacher.getAll();\n    return res(ctx.status(200), ctx.json({ ...sanitizeUser(user)\n    }));\n  }\n\n  return res(ctx.status(401));\n})];","map":{"version":3,"sources":["/Users/daniel/Documents/GitHub/hr-study-buddy/src/mocks/handlers/auth.js"],"names":["rest","db","authenticateRequest","sanitizeUser","user","password","auth","post","req","res","ctx","teacher","findFirst","where","login","equals","body","token","btoa","localStorage","setItem","status","json","error","get","getAll"],"mappings":"AAAA,SAASA,IAAT,QAAqB,KAArB;AACA,SAASC,EAAT,QAAmB,UAAnB;AACA,SAASC,mBAAT,QAAoC,eAApC;;AAEA,MAAMC,YAAY,GAAIC,IAAD,IAAU;AAC7B,QAAM;AAAEC,IAAAA,QAAF;AAAY,OAAGL;AAAf,MAAwBI,IAA9B;AACA,SAAOJ,IAAP;AACD,CAHD;;AAKA,OAAO,MAAMM,IAAI,GAAG,CAClBN,IAAI,CAACO,IAAL,CAAU,QAAV,EAAoB,CAACC,GAAD,EAAMC,GAAN,EAAWC,GAAX,KAAmB;AACrC,QAAMN,IAAI,GAAGH,EAAE,CAACU,OAAH,CAAWC,SAAX,CAAqB;AAChCC,IAAAA,KAAK,EAAE;AACLC,MAAAA,KAAK,EAAE;AACLC,QAAAA,MAAM,EAAEP,GAAG,CAACQ,IAAJ,CAASF;AADZ;AADF;AADyB,GAArB,CAAb;;AAOA,MAAIV,IAAI,IAAIA,IAAI,CAACC,QAAL,KAAkBG,GAAG,CAACQ,IAAJ,CAASX,QAAvC,EAAiD;AAC/C,UAAMY,KAAK,GAAGC,IAAI,CAACd,IAAI,CAACU,KAAN,CAAlB;AACAK,IAAAA,YAAY,CAACC,OAAb,CAAqB,cAArB,EAAqCH,KAArC;AACA,WAAOR,GAAG,CAACC,GAAG,CAACW,MAAJ,CAAW,GAAX,CAAD,EAAkBX,GAAG,CAACY,IAAJ,CAAS,EAAE,GAAGnB,YAAY,CAACC,IAAD,CAAjB;AAAyBa,MAAAA;AAAzB,KAAT,CAAlB,CAAV;AACD;;AACD,SAAOR,GAAG,CACRC,GAAG,CAACW,MAAJ,CAAW,GAAX,CADQ,EAERX,GAAG,CAACY,IAAJ,CAAS;AACPC,IAAAA,KAAK,EAAE;AADA,GAAT,CAFQ,CAAV;AAMD,CAnBD,CADkB,EAqBlBvB,IAAI,CAACwB,GAAL,CAAS,KAAT,EAAgB,CAAChB,GAAD,EAAMC,GAAN,EAAWC,GAAX,KAAmB;AACjC,MAAIR,mBAAmB,CAACM,GAAD,CAAvB,EAA8B;AAC5B,UAAMJ,IAAI,GAAGH,EAAE,CAACU,OAAH,CAAWc,MAAX,EAAb;AACA,WAAOhB,GAAG,CAACC,GAAG,CAACW,MAAJ,CAAW,GAAX,CAAD,EAAkBX,GAAG,CAACY,IAAJ,CAAS,EAAE,GAAGnB,YAAY,CAACC,IAAD;AAAjB,KAAT,CAAlB,CAAV;AACD;;AACD,SAAOK,GAAG,CAACC,GAAG,CAACW,MAAJ,CAAW,GAAX,CAAD,CAAV;AACD,CAND,CArBkB,CAAb","sourcesContent":["import { rest } from 'msw';\nimport { db } from 'mocks/db';\nimport { authenticateRequest } from 'mocks/helpers';\n\nconst sanitizeUser = (user) => {\n  const { password, ...rest } = user;\n  return rest;\n};\n\nexport const auth = [\n  rest.post('/login', (req, res, ctx) => {\n    const user = db.teacher.findFirst({\n      where: {\n        login: {\n          equals: req.body.login,\n        },\n      },\n    });\n    if (user && user.password === req.body.password) {\n      const token = btoa(user.login);\n      localStorage.setItem('__be_token__', token);\n      return res(ctx.status(200), ctx.json({ ...sanitizeUser(user), token }));\n    }\n    return res(\n      ctx.status(403),\n      ctx.json({\n        error: 'Invalid user data',\n      })\n    );\n  }),\n  rest.get('/me', (req, res, ctx) => {\n    if (authenticateRequest(req)) {\n      const user = db.teacher.getAll();\n      return res(ctx.status(200), ctx.json({ ...sanitizeUser(user) }));\n    }\n    return res(ctx.status(401));\n  }),\n];\n"]},"metadata":{},"sourceType":"module"}