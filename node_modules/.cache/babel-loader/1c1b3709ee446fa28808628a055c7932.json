{"ast":null,"code":"import { rest } from 'msw';\nimport { db } from 'mocks/db';\nexport const students = [rest.get('/students/:id', (req, res, ctx) => {\n  if (req.params.id) {\n    const matchingStudent = db.student.findFirst({\n      where: {\n        id: {\n          equals: req.params.id\n        }\n      }\n    });\n\n    if (!matchingStudent) {\n      return res(ctx.status(404), ctx.json({\n        error: 'No matching student'\n      }));\n    }\n\n    return res(ctx.status(200), ctx.json({\n      students: matchingStudent\n    }));\n  }\n\n  return res(ctx.status(200), ctx.json({\n    students: db.student.getAll()\n  }));\n}), rest.post('/students/search', (req, res, ctx) => {\n  const matchingStudents = db.student.findMany({\n    where: {\n      name: {\n        contains: req.body.searchPhrase\n      }\n    }\n  });\n  return res(ctx.status(200), ctx.json({\n    students: matchingStudents\n  }));\n})];","map":{"version":3,"sources":["/Users/daniel/Documents/GitHub/hr-study-buddy/src/mocks/handlers/students.js"],"names":["rest","db","students","get","req","res","ctx","params","id","matchingStudent","student","findFirst","where","equals","status","json","error","getAll","post","matchingStudents","findMany","name","contains","body","searchPhrase"],"mappings":"AAAA,SAASA,IAAT,QAAqB,KAArB;AACA,SAASC,EAAT,QAAmB,UAAnB;AAEA,OAAO,MAAMC,QAAQ,GAAG,CACtBF,IAAI,CAACG,GAAL,CAAS,eAAT,EAA0B,CAACC,GAAD,EAAMC,GAAN,EAAWC,GAAX,KAAmB;AAC3C,MAAIF,GAAG,CAACG,MAAJ,CAAWC,EAAf,EAAmB;AACjB,UAAMC,eAAe,GAAGR,EAAE,CAACS,OAAH,CAAWC,SAAX,CAAqB;AAC3CC,MAAAA,KAAK,EAAE;AACLJ,QAAAA,EAAE,EAAE;AACFK,UAAAA,MAAM,EAAET,GAAG,CAACG,MAAJ,CAAWC;AADjB;AADC;AADoC,KAArB,CAAxB;;AAOA,QAAI,CAACC,eAAL,EAAsB;AACpB,aAAOJ,GAAG,CACRC,GAAG,CAACQ,MAAJ,CAAW,GAAX,CADQ,EAERR,GAAG,CAACS,IAAJ,CAAS;AACPC,QAAAA,KAAK,EAAE;AADA,OAAT,CAFQ,CAAV;AAMD;;AACD,WAAOX,GAAG,CACRC,GAAG,CAACQ,MAAJ,CAAW,GAAX,CADQ,EAERR,GAAG,CAACS,IAAJ,CAAS;AACPb,MAAAA,QAAQ,EAAEO;AADH,KAAT,CAFQ,CAAV;AAMD;;AAED,SAAOJ,GAAG,CACRC,GAAG,CAACQ,MAAJ,CAAW,GAAX,CADQ,EAERR,GAAG,CAACS,IAAJ,CAAS;AACPb,IAAAA,QAAQ,EAAED,EAAE,CAACS,OAAH,CAAWO,MAAX;AADH,GAAT,CAFQ,CAAV;AAMD,CA/BD,CADsB,EAiCtBjB,IAAI,CAACkB,IAAL,CAAU,kBAAV,EAA8B,CAACd,GAAD,EAAMC,GAAN,EAAWC,GAAX,KAAmB;AAC/C,QAAMa,gBAAgB,GAAGlB,EAAE,CAACS,OAAH,CAAWU,QAAX,CAAoB;AAC3CR,IAAAA,KAAK,EAAE;AACLS,MAAAA,IAAI,EAAE;AACJC,QAAAA,QAAQ,EAAElB,GAAG,CAACmB,IAAJ,CAASC;AADf;AADD;AADoC,GAApB,CAAzB;AAOA,SAAOnB,GAAG,CACRC,GAAG,CAACQ,MAAJ,CAAW,GAAX,CADQ,EAERR,GAAG,CAACS,IAAJ,CAAS;AACPb,IAAAA,QAAQ,EAAEiB;AADH,GAAT,CAFQ,CAAV;AAMD,CAdD,CAjCsB,CAAjB","sourcesContent":["import { rest } from 'msw';\nimport { db } from 'mocks/db';\n\nexport const students = [\n  rest.get('/students/:id', (req, res, ctx) => {\n    if (req.params.id) {\n      const matchingStudent = db.student.findFirst({\n        where: {\n          id: {\n            equals: req.params.id,\n          },\n        },\n      });\n      if (!matchingStudent) {\n        return res(\n          ctx.status(404),\n          ctx.json({\n            error: 'No matching student',\n          })\n        );\n      }\n      return res(\n        ctx.status(200),\n        ctx.json({\n          students: matchingStudent,\n        })\n      );\n    }\n\n    return res(\n      ctx.status(200),\n      ctx.json({\n        students: db.student.getAll(),\n      })\n    );\n  }),\n  rest.post('/students/search', (req, res, ctx) => {\n    const matchingStudents = db.student.findMany({\n      where: {\n        name: {\n          contains: req.body.searchPhrase,\n        },\n      },\n    });\n    return res(\n      ctx.status(200),\n      ctx.json({\n        students: matchingStudents,\n      })\n    );\n  }),\n];\n"]},"metadata":{},"sourceType":"module"}